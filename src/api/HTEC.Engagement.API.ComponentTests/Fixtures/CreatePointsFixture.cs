using System;
using System.Threading.Tasks;
using Amido.Stacks.Application.CQRS.ApplicationEvents;
using HTEC.Engagement.Application.CQRS.Events;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;
using NSubstitute;
using HTEC.Engagement.API.Authentication;
using HTEC.Engagement.API.Models.Requests;
using HTEC.Engagement.Application.Integration;

namespace HTEC.Engagement.API.ComponentTests.Fixtures
{
    public class CreatePointsFixture : ApiClientFixture
    {
        readonly CreatePointsRequest newPoints;
        IPointsRepository repository;
        IApplicationEventPublisher applicationEventPublisher;

        public CreatePointsFixture(CreatePointsRequest newPoints, IOptions<JwtBearerAuthenticationConfiguration> jwtBearerAuthenticationOptions)
            : base(jwtBearerAuthenticationOptions)
        {
            this.newPoints = newPoints;
        }

        protected override void RegisterDependencies(IServiceCollection collection)
        {
            base.RegisterDependencies(collection);

            // Mocked external dependencies, the setup should
            // come later according to the scenarios
            repository = Substitute.For<IPointsRepository>();
            applicationEventPublisher = Substitute.For<IApplicationEventPublisher>();

            collection.AddTransient(IoC => repository);
            collection.AddTransient(IoC => applicationEventPublisher);
        }


        /****** GIVEN ******************************************************/

        internal void GivenAValidPoints()
        {
            // Don't need to do anything here assuming the
            // newPoints auto generated by AutoFixture is valid
        }

        internal void GivenAInvalidPoints()
        {
            newPoints.Name = null;
            newPoints.Description = null;
        }


        internal void GivenAPointsDoesNotExist()
        {
            repository.GetByIdAsync(id: Arg.Any<Guid>())
                        .Returns((Domain.Points)null);
        }


        /****** WHEN ******************************************************/

        internal async Task WhenThePointsCreationIsSubmitted()
        {
            await CreatePoints(newPoints);
        }

        /****** THEN ******************************************************/

        internal void ThenGetPointsByIdIsCalled()
        {
            repository.Received(1).GetByIdAsync(Arg.Any<Guid>());
        }
        internal void ThenThePointsIsSubmittedToDatabase()
        {
            repository.Received(1).SaveAsync(Arg.Is<Domain.Points>(points => points.Name == newPoints.Name));
        }

        internal void ThenThePointsIsNotSubmittedToDatabase()
        {
            repository.DidNotReceive().SaveAsync(Arg.Any<Domain.Points>());
        }

        internal void ThenAPointsCreatedEventIsRaised()
        {
            applicationEventPublisher.Received(1).PublishAsync(Arg.Any<PointsCreatedEvent>());
        }

        internal void ThenAPointsCreatedEventIsNotRaised()
        {
            applicationEventPublisher.DidNotReceive().PublishAsync(Arg.Any<PointsCreatedEvent>());
        }
    }
}
